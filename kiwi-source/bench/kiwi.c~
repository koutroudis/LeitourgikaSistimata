#include <string.h>
#include "../engine/db.h"
#include "../engine/variant.h"
#include "bench.h"

#define DATAS ("testdb")

//checkaroume to pote tha anoixei kai tha kleisei to database
int checkOpenDb = 0;
int checkCloseDb = 0;
//tis metatrepsame se global metavlhtes
long long start,end;
DB* db;
int found = 0;//metraei to sunoliko plh8os twn kleidiwn pou vrethhkan


void _write_test(void *arguments)
{
	//dhlwnouem thn struct kai pername ta orismata se topikes metavlhtes
	struct argumentsThread *args = (struct argumentsThread *) arguments;
	long int count = args->count;
	int r = args->r;
	int startNumTh = args->startNumTh;
	int untilNumber = args->untilNumber;
	//sto sugkekrimeno if tha mpei mono to prwto nhma, to opoio tha anoixei thn database kai tha apothhkeush ton arxiko xrono
	if(checkOpenDb == 0){
		checkOpenDb = checkOpenDb + 1;
		db = db_open(DATAS);
		start = get_ustime_sec();
	}
	pthread_mutex_unlock(&threadArgNumberSafe); //xeklhdwnoume , afou pleon exoun perastei ta swsta orismata gia to kathe nhma
	
	int i;
	double cost;
	Variant sk, sv;

	char key[KSIZE + 1];
	char val[VSIZE + 1];
	char sbuf[1024];

	memset(key, 0, KSIZE + 1);
	memset(val, 0, VSIZE + 1);
	memset(sbuf, 0, 1024);
	
	for (i = startNumTh; i <(startNumTh + untilNumber); i++) {//diatrexoume thn for analoga me to plhthos twn kleidiwn pou theloume na epexergasth to kathe nhma
		if (r)
			_random_key(key, KSIZE);
		else
			snprintf(key, KSIZE, "key-%d", i);
		fprintf(stderr, "%d adding %s\n", i, key);
		snprintf(val, VSIZE, "val-%d", i);
		
		sk.length = KSIZE;
		sk.mem = key;
		sv.length = VSIZE;
		sv.mem = val;
		//2o erwthma
		//pthread_mutex_lock(&putSafe);//kleidwnoume gia na prostatepsoume thn domh ths db_add
		db_add(db, &sk, &sv);
		//pthread_mutex_unlock(&putSafe);//xekleidwnoume
		
		if ((i % 10000) == 0) {
			fprintf(stderr,"random write finished %d ops%30s\r", 
					i, 
					"");

			fflush(stderr);
		
		}
		
	}
	
	
	pthread_mutex_lock(&numberSafe);//kleidwnoume gia na prostatepsoume thn global metavlhth checkCloseDb
	checkCloseDb = checkCloseDb + 1;
	if(checkCloseDb==THREADSNUMBER){//sthn sugkekrimenh if tha mpei mono to teleutaio nhma pou tha oloklhrwsei tis leitourgies tou
		db_close(db);
		end = get_ustime_sec();//apothhkeuei ton teliko xrono
		cost = end -start;//upologizei to kostos

		printf(LINE);
		printf("|Random-Write	(done:%ld): %.6f sec/op; %.1f writes/sec(estimated); cost:%.3f(sec);\n"
			,count, (double)(cost / count)
			,(double)(count / cost)
			,cost);
	}
	pthread_mutex_unlock(&numberSafe);
	
	
}

void _read_test(void *arguments)
{
	//dhlwnouem thn struct kai pername ta orismata se topikes metavlhtes
	struct argumentsThread *args = (struct argumentsThread *) arguments;
	long int count = args->count;
	int r = args->r;
	int startNumTh = args->startNumTh;
	int untilNumber = args->untilNumber;
	
	//sto sugkekrimeno if tha mpei mono to prwto nhma, to opoio tha anoixei thn database kai tha apothhkeush ton arxiko xrono
	if(checkOpenDb == 0){
		checkOpenDb = checkOpenDb + 1;
		db = db_open(DATAS);
		start = get_ustime_sec();
	}
	pthread_mutex_unlock(&threadArgNumberSafe);//xeklhdwnoume , afou pleon exoun perastei ta swsta orismata gia to kathe nhma
	int i;
	int ret;
	double cost;
	Variant sk;
	Variant sv;
	
	char key[KSIZE + 1];
	
	
	
	for (i = startNumTh; i <(startNumTh + untilNumber); i++) {//diatrexoume thn for analoga me to plhthos twn kleidiwn pou theloume na epexergasth to kathe nhma
		memset(key, 0, KSIZE + 1);

		/* if you want to test random write, use the following */
		if (r)
			_random_key(key, KSIZE);
		else
			snprintf(key, KSIZE, "key-%d", i);
		fprintf(stderr, "%d searching %s\n", i, key);
		
		sk.length = KSIZE;
		sk.mem = key;
		
		ret = db_get(db, &sk, &sv);
		
		pthread_mutex_lock(&globalGetSafe);//kleidwnoume gia na prostatepsoume  thn global metavlhth found
		if (ret) {
			//db_free_data(sv.mem);
			found++;
		} else {
			INFO("not found key#%s", 
					sk.mem);
    	}
    	pthread_mutex_unlock(&globalGetSafe);

		if ((i % 10000) == 0) {
			fprintf(stderr,"random read finished %d ops%30s\r", 
					i, 
					"");

			fflush(stderr);
		}
	}
	
	pthread_mutex_lock(&numberSafe);//kleidwnoume gia na prostatepsoume thn global metavlhth checkCloseDb
	checkCloseDb = checkCloseDb + 1;
	if(checkCloseDb == THREADSNUMBER){//sthn sugkekrimenh if tha mpei mono to teleutaio nhma pou tha oloklhrwsei tis leitourgies tou
		db_close(db);
		end = get_ustime_sec();//apothhkeush ton teliko xrono
		cost = end - start;//upologizei to kostos
		printf(LINE);
		printf("|Random-Read	(done:%ld, found:%d): %.6f sec/op; %.1f reads /sec(estimated); cost:%.3f(sec)\n",
			count, found,(double)(cost / count),
			(double)(count / cost),
			cost);
	}
	pthread_mutex_unlock(&numberSafe);
}
